package ast

// this file was generated by tools/gen_ast.go

import (
	"fmt"
	"github.com/angles-n-daemons/popsql/pkg/sql/parser/scanner"
)

type walkFunc func(Expr) error


type Expr interface {
	isExpr()
}

type ExprVisitor[T any] interface {
	VisitIdentifierExpr(*Identifier) (T, error)
	VisitBinaryExpr(*Binary) (T, error)
	VisitLiteralExpr(*Literal) (T, error)
	VisitUnaryExpr(*Unary) (T, error)
	VisitColumnSpecExpr(*ColumnSpec) (T, error)
}

func VisitExpr[T any](expr Expr, visitor ExprVisitor[T]) (T, error) {
	switch typedExpr := expr.(type) {
	case *Identifier:
		return visitor.VisitIdentifierExpr(typedExpr)
	case *Binary:
		return visitor.VisitBinaryExpr(typedExpr)
	case *Literal:
		return visitor.VisitLiteralExpr(typedExpr)
	case *Unary:
		return visitor.VisitUnaryExpr(typedExpr)
	case *ColumnSpec:
		return visitor.VisitColumnSpecExpr(typedExpr)
	default:
		return *new(T), fmt.Errorf("unable to visit type %T", typedExpr)
	}
}


type Identifier struct {
	Name *scanner.Token
}
func (t *Identifier) isExpr() {}



type Binary struct {
	Left Expr
	Operator *scanner.Token
	Right Expr
}
func (t *Binary) isExpr() {}



type Literal struct {
	Value *scanner.Token
}
func (t *Literal) isExpr() {}



type Unary struct {
	Operator *scanner.Token
	Right Expr
}
func (t *Unary) isExpr() {}



type ColumnSpec struct {
	Name *Identifier
	DataType *scanner.Token
}
func (t *ColumnSpec) isExpr() {}



type StmtVisitor[T any] interface {
	VisitSelectStmt(*Select) (T, error)
	VisitInsertStmt(*Insert) (T, error)
	VisitCreateTableStmt(*CreateTable) (T, error)
}

func VisitStmt[T any](expr Stmt, visitor StmtVisitor[T]) (T, error) {
	switch typedStmt := expr.(type) {
	case *Select:
		return visitor.VisitSelectStmt(typedStmt)
	case *Insert:
		return visitor.VisitInsertStmt(typedStmt)
	case *CreateTable:
		return visitor.VisitCreateTableStmt(typedStmt)
	default:
		return *new(T), fmt.Errorf("unable to visit type %T", typedStmt)
	}
}


type Select struct {
	Terms []*Identifier
	From *Identifier
	Where Expr
}
func (t *Select) isStmt() {}



type Insert struct {
	Table *Identifier
	Columns []*Identifier
	Values [][]Expr
}
func (t *Insert) isStmt() {}



type CreateTable struct {
	Name *Identifier
	Columns []*ColumnSpec
}
func (t *CreateTable) isStmt() {}




type Stmt interface {
	isStmt()
}


