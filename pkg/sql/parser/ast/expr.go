package ast

// this file was generated by tools/gen_ast.go

import (
	"fmt"

	"github.com/angles-n-daemons/popsql/pkg/sql/parser/scanner"
)

type walkFunc func(Expr) error

type Expr interface {
	Walk(walkFunc) error
}

type ExprVisitor[T any] interface {
	VisitBinaryExpr(*Binary) (*T, error)
	VisitLiteralExpr(*Literal) (*T, error)
	VisitUnaryExpr(*Unary) (*T, error)
	VisitAssignmentExpr(*Assignment) (*T, error)
	VisitExprListExpr(*ExprList) (*T, error)
}

func Visit[T any](expr Expr, visitor ExprVisitor[T]) (*T, error) {
	switch typedExpr := expr.(type) {
	case *Binary:
		return visitor.VisitBinaryExpr(typedExpr)
	case *Literal:
		return visitor.VisitLiteralExpr(typedExpr)
	case *Unary:
		return visitor.VisitUnaryExpr(typedExpr)
	case *Assignment:
		return visitor.VisitAssignmentExpr(typedExpr)
	case *ExprList:
		return visitor.VisitExprListExpr(typedExpr)
	default:
		return nil, fmt.Errorf("unable to visit type %T", typedExpr)
	}
}

type Binary struct {
	Left     Expr
	Operator scanner.Token
	Right    Expr
}

func (e Binary) Walk(f walkFunc) error {
	var err error
	err = e.Left.Walk(f)

	if err != nil {
		return err
	}

	err = e.Right.Walk(f)

	if err != nil {
		return err
	}

	return err
}

type Literal struct {
	Value any
}

func (e Literal) Walk(f walkFunc) error {
	var err error
	return err
}

type Unary struct {
	Operator scanner.Token
	Right    Expr
}

func (e Unary) Walk(f walkFunc) error {
	var err error
	err = e.Right.Walk(f)

	if err != nil {
		return err
	}

	return err
}

type Assignment struct {
	Name  scanner.Token
	Value Expr
}

func (e Assignment) Walk(f walkFunc) error {
	var err error
	err = e.Value.Walk(f)

	if err != nil {
		return err
	}

	return err
}

type ExprList struct {
	Exprs []Expr
}

func (e ExprList) Walk(f walkFunc) error {
	var err error
	for i := 0; i < len(e.Exprs); i++ {
		err = e.Exprs[i].Walk(f)

		if err != nil {
			return err
		}

	}
	return err
}
